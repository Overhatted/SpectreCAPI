import org.gradle.internal.jvm.Jvm


plugins {
    id 'cpp-library'
    id 'base'
}

description = 'Master Password Algorithm Implementation'

artifacts {
    'default' task( type: Zip, "archive" ) {
        components.withType( ComponentWithRuntimeFile ) {
            if (isOptimized()) {
                from runtimeFile
                into standardOperatingSystem( targetPlatform ) + '/' + standardArchitecture( targetPlatform )
            }
        }
    }
}

library {
    baseName.set( "mpw" )
    linkage.set( [ Linkage.SHARED ] )

    // Reconfigure the toolchain from C++ to C.
    toolChains {
        withType( VisualCpp ) {
            eachPlatform {
                cppCompiler.withArguments { addAll( ["/TC", "/MT", "/Ox", "/DMPW_SODIUM=1", "/DSODIUM_STATIC", "/DSODIUM_EXPORT="] ) }
            }
        }
        withType( GccCompatibleToolChain ) {
            eachPlatform {
                cppCompiler.withArguments { addAll( ["-x", "c", "-O3", "-std=c11", "-Werror", "-DMPW_SODIUM=1"] ) }
            }
        }
    }
    components.withType( CppComponent ) {
        cppSource.from fileTree( dir: "src", include: "**/*.c" )
    }

    // Cross-compile for these host platforms.
    // TODO: Cross-compiling, blocked by: https://github.com/gradle/gradle-native/issues/169 - CppLibraryPlugin.java:163
    operatingSystems.set( [objects.named( OperatingSystemFamily, OperatingSystemFamily.WINDOWS ),
                           objects.named( OperatingSystemFamily, OperatingSystemFamily.LINUX ),
                           objects.named( OperatingSystemFamily, OperatingSystemFamily.MAC_OS )] )

    publicHeaders {
        // Depend on JDK for JNI support.
        from files( new File( Jvm.current().javaHome, "include" ) ) { first().eachDir { from it } }
        publicHeaders.from files( "$rootDir/../lib/libsodium/src/libsodium/include" )
    }

    binaries.configureEach {
        def system = standardOperatingSystem( targetPlatform )

        dependencies {
            implementation fileTree( "$rootDir/../lib/libsodium/build-${system}~/out/lib" )
        }

        if (project.tasks.findByName('build_libsodium') == null)
            archive.dependsOn task( type: Exec, 'build_libsodium', {
                commandLine 'bash', "$rootDir/../lib/bin/build_libsodium-${system}"
            } )
//        if (project.tasks.findByName('build_libjson-c') == null)
//            archive.dependsOn task( type: Exec, 'build_libjson-c', {
//                commandLine 'bash', "$rootDir/../lib/bin/build_libjson-c-${system}"
//            } )
    }
}


static String standardOperatingSystem(NativePlatform platform) {
    OperatingSystem os = platform.getOperatingSystem()
    if (os.isWindows())
        return OperatingSystemFamily.WINDOWS
    else if (os.isMacOsX())
        return OperatingSystemFamily.MAC_OS
    else if (os.isLinux())
        return OperatingSystemFamily.LINUX

    // Other systems will need to use a Linux compatibility layer for now.
    return OperatingSystemFamily.LINUX
}

static String standardArchitecture(NativePlatform platform) {
    Architecture arch = platform.getArchitecture()
    if (arch.isArm())
        return "arm"
    else if (arch.name.toLowerCase( Locale.ROOT ).startsWith( "arm" ))
        return "arm64"
    else if (arch.isAmd64())
        return "x86_64"
    else if (arch.isI386())
        return "x86"

    // Other systems will need to be compatible with the x86 architecture.
    return "x86"
}
